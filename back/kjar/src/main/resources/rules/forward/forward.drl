package forward;
import com.ftn.sbnz.model.models.Injury;
import com.ftn.sbnz.model.models.Player;
import com.ftn.sbnz.model.models.PlayerStatus;
import java.util.Date;

import com.ftn.sbnz.model.models.CategoryScores;
import com.ftn.sbnz.model.models.RecommendationList
import java.util.ArrayList
import java.util.List
import java.util.Collections
import java.util.stream.Collectors
import java.util.Comparator;


rule "new_injury"
//agenda-group "injury-group"
    when
        $i: Injury(recoveryTimeInDays == null, playerId:player.getId())
        $p: Player(id==playerId, status==PlayerStatus.HEALTHY)
    then
        modify($p){setStatus(PlayerStatus.OUT)};
        System.out.println($p.getStatus());
end

// bounus += igrac_ou - prosek tima - broj dana koji propusta
rule "Change bonus points because of injury"
//agenda-group "injury-group"
salience 1
no-loop true
    when

        $i: Injury(recoveryTimeInDays == null, $estDays: estimatedRecoveryTimeInDays, desc: description, playerId:player.getId())
        $p: Player(id==playerId, status==PlayerStatus.OUT, $gp: statisticalColumns.getGp(), team: nbaTeam.getName(), $bonus: totalBonusPoints)
        Number( $gpAvg: intValue ) from accumulate(
            Player(nbaTeam.name==team, id!=playerId, gp: statisticalColumns.gp),
                      average(gp)
                    )
    then
        System.out.println($gpAvg);
        System.out.println($estDays);
        modify($p){setTotalBonusPoints(((int)  -$gpAvg) + $bonus + $gp - $estDays )};
        System.out.println($p.getTotalBonusPoints());
end

rule "Remove from recommendation list when under bonus margin"
//agenda-group "injury-group"
    when
        CategoryScores($bm: bonusMargin)
        $p: Player(totalBonusPoints<$bm)
        $rl: RecommendationList(players contains $p, $players: players)
    then
        System.out.println("Remove from recommendation list when under bonus margin");
        $players.remove($p);
//        $rl.setPlayers($players);
        update($rl);

end


rule "recovery"
//agenda-group "injury-group"
    when
        $i: Injury(recoveryTimeInDays == null, recovered == true, playerId:player.getId(), startDate:timestamp)
        $p: Player(id==playerId, status==PlayerStatus.OUT)
    then
        modify($p){setStatus(PlayerStatus.HEALTHY)};
        Date currentDate = new Date();
        long difference = currentDate.getTime() - startDate.getTime();
        long differenceInDays = difference / (24 * 60 * 60 * 1000);
        modify($i){setRecoveryTimeInDays((int) differenceInDays)};
        System.out.println($i.getRecoveryTimeInDays());
        System.out.println($p.getStatus());
end


rule "Update Player Scores"
salience 100
//agenda-group "recommendation-group"
when
    $categoryScores : CategoryScores($pointScore : pointScore,
                                      $reboundScore : reboundScore,
                                      $assistScore : assistScore,
                                      $stealScore : stealScore,
                                      $turnoverScore : turnoverScore,
                                      $blockScore : blockScore)

    $player : Player()

then
    System.out.println("player");
    Integer gamesPlayed = $player.getStatisticalColumns().getGp();
    Integer newTotalFantasyPoints =(int) ($player.getStatisticalColumns().getPpg() * gamesPlayed * $pointScore) +
                                   (int) ($player.getStatisticalColumns().getRpg() * gamesPlayed * $reboundScore) +
                                   (int) ($player.getStatisticalColumns().getApg() * gamesPlayed * $assistScore) +
                                   (int) ($player.getStatisticalColumns().getSpg() * gamesPlayed * $stealScore) +
                                   (int) ($player.getStatisticalColumns().getTpg() * gamesPlayed * $turnoverScore) +
                                   (int) ($player.getStatisticalColumns().getBpg() * gamesPlayed * $blockScore);

    $player.setTotalFantasyPoints(newTotalFantasyPoints);

end

rule "Recommendation list"
//agenda-group "recommendation-group"
salience 1
    when
        $r: RecommendationList(players == null)
        $list: List() from collect(Player())
    then
        System.out.println("list");
        RecommendationList recommendationList = $r;
        recommendationList.setPlayers(new ArrayList<>());
        recommendationList.getPlayers().addAll($list);

        Collections.sort(recommendationList.getPlayers(), Comparator.comparing(Player::getTotalFantasyPoints).reversed());
        recommendationList.getPlayers().forEach(player -> System.out.println(player.getName() + " - Fantasy points: " + player.getTotalFantasyPoints()));
end

//rule "injury_history"
//    when
//        $i: Injury(recoveryTimeInDays != null)
//    then
//        System.out.println($i.getRecoveryTimeInDays());
//end

rule "calc_injury_estimated_time"
//agenda-group "injury-group"
salience 2
    when
        $i: Injury(recoveryTimeInDays == null, desc: description, playerId:player.getId())
        $p: Player(id==playerId, status==PlayerStatus.OUT)
        Number( $avg: intValue ) from accumulate(
               Injury($r: recoveryTimeInDays, recoveryTimeInDays != null, description==desc),
              average($r)
            )
    then
        System.out.println("calc_injury_estimated_time");
        modify($i){setEstimatedRecoveryTimeInDays((int) $avg)};
end

//rule "players"
//    when
//        $p: Player()
//    then
//        System.out.println($p.getName());
//end
