package forward;
import com.ftn.sbnz.model.models.injuries.Injury;
import com.ftn.sbnz.model.models.Player;
import com.ftn.sbnz.model.models.PlayerStatus;
import java.util.Date;

import com.ftn.sbnz.model.models.stats.CategoryScores;
import com.ftn.sbnz.model.models.RecommendationList
import java.util.ArrayList
import java.util.List
import java.util.Collections
import java.util.stream.Collectors
import java.util.Comparator;




rule "Remove from recommendation list when under bonus margin"
//agenda-group "injury-group"
    when
        CategoryScores($bm: bonusMargin)
        $p: Player(totalBonusPoints<$bm)
        $rl: RecommendationList(players contains $p, $players: players)
    then
        System.out.println("Remove from recommendation list when under bonus margin");
        $players.remove($p);
//        $rl.setPlayers($players);
        update($rl);

end





//rule "Update Player Scores"
//salience 100
////agenda-group "recommendation-group"
//when
//    $categoryScores : CategoryScores($pointScore : pointScore,
//                                      $reboundScore : reboundScore,
//                                      $assistScore : assistScore,
//                                      $stealScore : stealScore,
//                                      $turnoverScore : turnoverScore,
//                                      $blockScore : blockScore)
//
//    $player : Player(
//        $gamesPlayed : statisticalColumns.gp,
//        $ppg : statisticalColumns.ppg,
//        $rpg : statisticalColumns.rpg,
//        $apg : statisticalColumns.apg,
//        $spg : statisticalColumns.spg,
//        $tpg : statisticalColumns.tpg,
//        $bpg : statisticalColumns.bpg
//    )
//
//    $newTotalFantasyPoints : Integer() from
//            new Integer(
//                (int) ($ppg * $gamesPlayed * $pointScore) +
//                (int) ($rpg * $gamesPlayed * $reboundScore) +
//                (int) ($apg * $gamesPlayed * $assistScore) +
//                (int) ($spg * $gamesPlayed * $stealScore) +
//                (int) ($tpg * $gamesPlayed * $turnoverScore) +
//                (int) ($bpg * $gamesPlayed * $blockScore)
//            )
//then
//    $player.setTotalFantasyPoints($newTotalFantasyPoints);
//end

rule "Recommendation list"
//agenda-group "recommendation-group"
salience 1
    when
        $r: RecommendationList(players == null)
        $list: List() from collect(Player())
    then
        $r.setPlayers(new ArrayList<>($list));
        Collections.sort($r.getPlayers(), Comparator.comparing(Player::getTotalFantasyPoints).reversed());
end

//rule "injury_history"
//    when
//        $i: Injury(recoveryTimeInDays != null)
//    then
//        System.out.println($i.getRecoveryTimeInDays());
//end



//rule "players"
//    when
//        $p: Player()
//    then
//        System.out.println($p.getName());
//end
