package forward;
import com.ftn.sbnz.model.models.injuries.Injury;
import com.ftn.sbnz.model.models.injuries.InjuryHistoryData;
import com.ftn.sbnz.model.models.Player;
import com.ftn.sbnz.model.models.PlayerStatus;
import java.util.Date;
import java.util.List;

query isInjuryExist(List<String> descriptionPart, int currentInd)
    InjuryHistoryData(description==String.join(" ", descriptionPart))
    or
    isInjuryExist(descriptionPart.subList(0, currentInd) ,currentInd-1;)
end

rule "calc_injury_estimated_time_backward"
salience 2
    when
        $i: Injury(recoveryTimeInDays == null, desc: description, $name: name, playerId:player.getId())
        $p: Player(id==playerId, status==PlayerStatus.OUT)
        isInjuryExist($name, 3)

    then
        System.out.println("calc_injury_estimated_time_backward");
        System.out.println($name.size());
//        modify($i){setEstimatedRecoveryTimeInDays((int) $res)};
end


rule "new_injury"
//agenda-group "injury-group"
    when
        $i: Injury(recoveryTimeInDays == null, playerId:player.getId())
        $p: Player(id==playerId, status==PlayerStatus.HEALTHY)
    then
        modify($p){setStatus(PlayerStatus.OUT)};
        System.out.println($p.getStatus());
end


rule "recovery"
//agenda-group "injury-group"
    when
        $i: Injury(recoveryTimeInDays == null, recovered == true, playerId:player.getId(), startDate:timestamp)
        $p: Player(id==playerId, status==PlayerStatus.OUT)
    then
        modify($p){setStatus(PlayerStatus.HEALTHY)};
        Date currentDate = new Date();
        long difference = currentDate.getTime() - startDate.getTime();
        long differenceInDays = difference / (24 * 60 * 60 * 1000);
        modify($i){setRecoveryTimeInDays((int) differenceInDays)};
        System.out.println($i.getRecoveryTimeInDays());
        System.out.println($p.getStatus());
end

rule "calc_injury_estimated_time"
//agenda-group "injury-group"
salience 2
    when
        $i: Injury(recoveryTimeInDays == null, desc: description, playerId:player.getId())
        $p: Player(id==playerId, status==PlayerStatus.OUT)
        Number( $avg: intValue ) from accumulate(
               Injury($r: recoveryTimeInDays, recoveryTimeInDays != null, description==desc),
              average($r)
            )
    then
        System.out.println("calc_injury_estimated_time");
        modify($i){setEstimatedRecoveryTimeInDays((int) $avg)};
end

// bounus += igrac_ou - prosek tima - broj dana koji propusta
rule "Change bonus points because of injury"
//agenda-group "injury-group"
salience 1
no-loop true
    when

        $i: Injury(recoveryTimeInDays == null, $estDays: estimatedRecoveryTimeInDays, desc: description, playerId:player.getId())
        $p: Player(id==playerId, status==PlayerStatus.OUT, $gp: statisticalColumns.getGp(), team: nbaTeam.getName(), $bonus: totalBonusPoints)
        Number( $gpAvg: intValue ) from accumulate(
            Player(nbaTeam.name==team, id!=playerId, gp: statisticalColumns.gp),
                      average(gp)
                    )
    then
        System.out.println($gpAvg);
        System.out.println($estDays);
        modify($p){setTotalBonusPoints(((int)  -$gpAvg) + $bonus + $gp - $estDays )};
        System.out.println($p.getTotalBonusPoints());
end