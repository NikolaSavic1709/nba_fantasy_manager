import com.ftn.sbnz.model.events.PlayerAdditionEvent
import com.ftn.sbnz.model.models.Player
import java.util.List

declare window SevenDaysAdditions
    @doc("last 7d")
    PlayerAdditionEvent() over window:time(7d)
end

rule "Added 3 players from same team"
    when
        $event: PlayerAdditionEvent($timestamp: additionTime,$fantasyTeamId: team.id, $teamId: player.nbaTeam.id)
        accumulate(
            PlayerAdditionEvent(this!=$event, $timestamp>additionTime ,$fantasyTeamId == team.id, $teamId == player.nbaTeam.id) from window SevenDaysAdditions,
            $cnt: count(1)
        )
        eval($cnt >= 2 )
        $playersList: List() from collect(Player($teamId == nbaTeam.id, $fantasyTeamId != fantasyTeam.id))
    then
        for (Object player : $playersList) {
            System.out.println(((Player) player).getName());
        }
        System.out.println("Added 3 players from same team");
end

rule "Added 5 players at same position"
    when
        $event: PlayerAdditionEvent($timestamp: additionTime,$fantasyTeamId: team.id, $positions: player.position)
        accumulate(
            PlayerAdditionEvent(this!=$event, $timestamp>additionTime ,$fantasyTeamId == team.id, $positions[0] memberOf player.position) from window SevenDaysAdditions,
            $cnt: count(1)
        )
        eval($cnt >= 4 )
        $playersList: List() from collect(Player($positions[0] memberOf position, $fantasyTeamId != fantasyTeam.id))
    then
        for (Object player : $playersList) {
            System.out.println(((Player) player).getName());
        }
        System.out.println("Added 5 players at same position");
end

rule "Added players with price in range"
    when
        $event: PlayerAdditionEvent($timestamp: additionTime,$fantasyTeamId: team.id, $price1: player.price)
        accumulate(
            PlayerAdditionEvent(this!=$event, $timestamp>additionTime ,$fantasyTeamId == team.id, $price: player.price )
            over window: length(5),
            $max: max($price),
            $min: min($price)
        )
        $playersList: List() from collect(Player(Math.max($max, $price1)>price, Math.min($min, $price1)<price, $fantasyTeamId != fantasyTeam.id))
    then
        for (Object player : $playersList) {
            System.out.println(((Player) player).getName());
        }
        System.out.println("Added players with price in range");
end