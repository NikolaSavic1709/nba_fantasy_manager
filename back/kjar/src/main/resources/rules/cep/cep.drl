import com.ftn.sbnz.model.events.PlayerAdditionEvent
import com.ftn.sbnz.model.events.PenaltyEvent
import com.ftn.sbnz.model.models.Player
import com.ftn.sbnz.model.models.injuries.Injury
import com.ftn.sbnz.model.models.PreferencesList
import com.ftn.sbnz.model.models.RecommendationList
import java.util.List
import java.util.Set
import java.util.Date

declare window SevenDaysAdditions
    @doc("last 7d")
    PlayerAdditionEvent() over window:time(7d)
end
declare window SevenDaysPenalties
    @doc("last 7d penalties")
    PenaltyEvent() over window:time(7d)
end

declare window TenMinutesAdditions
    @doc("last 10m")
    PlayerAdditionEvent() over window:time(10m)
end

declare window OneMonthInjuries
    @doc("last 1mo")
    Injury() over window:time(30d)
end

rule "Added 3 players in ten minutes"
    when
        $event: PlayerAdditionEvent($timestamp: additionTime,$fantasyTeamId: team.id, $team: team)
        accumulate(
            PlayerAdditionEvent(this!=$event, $timestamp>additionTime ,$fantasyTeamId == team.id) from window TenMinutesAdditions,
            $cnt: count(1)
        )
        eval($cnt >= 2 )
    then
        Date currentDate = new Date();
        long timestamp = currentDate.getTime();
        insert(new PenaltyEvent(timestamp, $team));
        System.out.println("Added 3 players in ten minutes");
end

rule "3 penalties in seven days"
    when
        $event: PenaltyEvent($timestamp: additionTime, $team: team)
        accumulate(
            PenaltyEvent(this!=$event, $timestamp>additionTime ,team==$team) from window SevenDaysPenalties,
            $cnt: count(1)
        )
        eval($cnt >= 2 )
    then
        int totalPoints=$team.getTotalPoints();
        modify($team){setTotalPoints((int) totalPoints-100)};
        System.out.println("3 penalties in seven days");
end

rule "Added 3 players from same team if preferences list doesnt exist"
    when
        $event: PlayerAdditionEvent($timestamp: additionTime,$fantasyTeamId: team.id, $teamId: player.nbaTeam.id, $team: team)
        accumulate(
            PlayerAdditionEvent(this!=$event, $timestamp>additionTime ,$fantasyTeamId == team.id, $teamId == player.nbaTeam.id) from window SevenDaysAdditions,
            $cnt: count(1)
        )
        eval($cnt >= 2 )
        $playersSet: Set() from collect(Player($teamId == nbaTeam.id, fantasyTeam==null))
        not( PreferencesList( team == $team ) )
    then
        for (Object player : $playersSet) {
            System.out.println(((Player) player).getName());
        }
        insert(new PreferencesList($playersSet, $team));
        System.out.println("Added 3 players from same team if preferences list doesnt exist");
end

rule "Added 3 players from same team if preferences list exists"
    when
        $event: PlayerAdditionEvent($timestamp: additionTime,$fantasyTeamId: team.id, $teamId: player.nbaTeam.id, $team: team)
        accumulate(
            PlayerAdditionEvent(this!=$event, $timestamp>additionTime ,$fantasyTeamId == team.id, $teamId == player.nbaTeam.id) from window SevenDaysAdditions,
            $cnt: count(1)
        )
        eval($cnt >= 2 )
        $playersSet: Set() from collect(Player($teamId == nbaTeam.id, fantasyTeam==null))
        $preferenceList: PreferencesList( team == $team )
    then
        for (Object player : $playersSet) {
            System.out.println(((Player) player).getName());
        }
        $preferenceList.getPlayers().addAll($playersSet);
        update($preferenceList);
        System.out.println("Added 3 players from same team if preferences list exists");
end

rule "Added 5 players at same position if preferences list doesnt exist"
    when
        $event: PlayerAdditionEvent($timestamp: additionTime,$fantasyTeamId: team.id, $positions: player.position, $team: team)
        accumulate(
            PlayerAdditionEvent(this!=$event, $timestamp>additionTime ,$fantasyTeamId == team.id, $positions[0] memberOf player.position) from window SevenDaysAdditions,
            $cnt: count(1)
        )
        eval($cnt >= 4 )
        $playersSet: Set() from collect(Player($positions[0] memberOf position, fantasyTeam==null))
        not( PreferencesList( team == $team ) )
    then
        for (Object player : $playersSet) {
            System.out.println(((Player) player).getName());
        }
        insert(new PreferencesList($playersSet, $team));
        System.out.println("Added 5 players at same position if preferences list doesnt exist");
end

rule "Added 5 players at same position if preferences list exists"
    when
        $event: PlayerAdditionEvent($timestamp: additionTime,$fantasyTeamId: team.id, $positions: player.position, $team: team)
        accumulate(
            PlayerAdditionEvent(this!=$event, $timestamp>additionTime ,$fantasyTeamId == team.id, $positions[0] memberOf player.position) from window SevenDaysAdditions,
            $cnt: count(1)
        )
        eval($cnt >= 4 )
        $playersSet: Set() from collect(Player($positions[0] memberOf position, fantasyTeam==null))
        $preferenceList: PreferencesList( team == $team )
   then
        for (Object player : $playersSet) {
            System.out.println(((Player) player).getName());
        }
        $preferenceList.getPlayers().addAll($playersSet);
        update($preferenceList);
        System.out.println("Added 5 players at same position if preferences list exists");
end

rule "Added players with price in range if preferences list doesnt exist"
    when
        $event: PlayerAdditionEvent($timestamp: additionTime,$fantasyTeamId: team.id, $price1: player.price, $team: team)
        accumulate(
            PlayerAdditionEvent(this!=$event, $timestamp>additionTime ,$fantasyTeamId == team.id, $price: player.price )
            over window: length(5),
            $max: max($price),
            $min: min($price),
            $count: count($price)
        )
        eval($count>=4)
        $playersSet: Set() from collect(Player(Math.max($max, $price1)>price, Math.min($min, $price1)<price, fantasyTeam==null))
        not( PreferencesList( team == $team ) )
    then
        for (Object player : $playersSet) {
            System.out.println(((Player) player).getName());
        }
        insert(new PreferencesList($playersSet, $team));
        System.out.println("Added players with price in range if preferences list doesnt exist");
end

rule "Added players with price in range if preferences list exists"
    when
        $event: PlayerAdditionEvent($timestamp: additionTime,$fantasyTeamId: team.id, $price1: player.price, $team: team)
        accumulate(
            PlayerAdditionEvent(this!=$event, $timestamp>additionTime ,$fantasyTeamId == team.id, $price: player.price )
            over window: length(5),
            $max: max($price),
            $min: min($price),
            $count: count($price)
        )
        eval($count>=4)
        $playersSet: Set() from collect(Player(Math.max($max, $price1)>price, Math.min($min, $price1)<price, fantasyTeam==null))
        $preferenceList: PreferencesList( team == $team )
    then

        for (Object player : $playersSet) {
            System.out.println(((Player) player).getName());
        }
        $preferenceList.getPlayers().addAll($playersSet);
        update($preferenceList);
        System.out.println("Added players with price in range if preferences list exists");
end

rule "Remove players from RL from team which has more than four injured players in last one month"
    when
        $rl: RecommendationList()
        $event: Injury($timestamp: timestamp,$team: player.nbaTeam)
        accumulate(
            Injury(this!=$event, $timestamp>timestamp ,$team == player.nbaTeam )
            from window SevenDaysAdditions,
            $cnt: count(1)
        )
        eval($cnt >= 4 )

        $playersList: List() from collect(Player($team == nbaTeam))
    then
        for (Object player : $playersList) {
            $rl.getPlayers().remove(player);
        }
        update($rl);
        System.out.println("Remove players from RL from team which has more than four injured players in last one month");
end